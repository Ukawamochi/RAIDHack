name: Deploy RAIDHack – Production

on:
  push:
    branches: [ master ]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    name: Deploy Workers API (prod)
    outputs:
      api-url: ${{ steps.deploy-api.outputs.api-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Install API dependencies
        run: |
          cd api
          npm ci

      - name: Deploy Workers API
        id: deploy-api
        run: |
          cd api
          WORKER_NAME="raidhack-api"
          echo "Deploying Worker: $WORKER_NAME"
          
          # Wrangler deploy and capture the actual URL
          deploy_output=$(npx wrangler deploy --minify --name "$WORKER_NAME" 2>&1)
          echo "Deploy output:"
          echo "$deploy_output"
          
          # Extract the actual deployed URL from wrangler output
          API_URL=$(echo "$deploy_output" | grep -oE 'https://[a-zA-Z0-9\-\.]+\.workers\.dev' | head -1)
          
          if [ -z "$API_URL" ]; then
            # Fallback: construct likely URL pattern
            API_URL="https://${WORKER_NAME}.workers.dev"
            echo "Could not extract URL from deploy output, using fallback: $API_URL"
          else
            echo "Extracted deployed URL: $API_URL"
          fi
          
          # Test the deployed API
          echo "Testing deployed API endpoint..."
          curl -f "$API_URL/health" || echo "Health check failed, but continuing"
          
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-web:
    runs-on: ubuntu-latest
    name: Deploy Pages (prod)
    needs: deploy-api
    outputs:
      pages-url: ${{ steps.deploy-pages.outputs.pages-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install Web dependencies
        run: |
          cd web
          npm ci

      - name: Build React app
        run: |
          cd web
          echo "=== Build Configuration ==="
          echo "API URL from deploy-api job: ${{ needs.deploy-api.outputs.api-url }}"
          
          # 環境変数を明示的に設定
          export VITE_API_BASE="${{ needs.deploy-api.outputs.api-url }}"
          echo "Set VITE_API_BASE=$VITE_API_BASE"
          
          # .env.production を動的に生成（既存のものを上書き）
          echo "# Auto-generated by CICD" > .env.production
          echo "VITE_API_BASE=$VITE_API_BASE" >> .env.production
          
          echo "=== Final .env.production content ==="
          cat .env.production
          
          echo "=== Starting Build ==="
          npm run build
          
          echo "=== Build Completed ==="
          echo "Contents of dist directory:"
          ls -la dist/
          
          # ビルドされたファイルに環境変数が正しく埋め込まれているか確認
          if [ -f "dist/assets/index-*.js" ]; then
            echo "=== Checking built JS for API URL ==="
            grep -o "https://[^\"']*\.workers\.dev" dist/assets/index-*.js | head -3 || echo "API URL not found in built files"
          fi
        env:
          VITE_API_BASE: ${{ needs.deploy-api.outputs.api-url }}

      - name: Deploy to Cloudflare Pages (production)
        id: deploy-pages
        run: |
          cd web
          
          echo "=== Deployment Configuration ==="
          echo "Project: raidhack-web"
          echo "Mode: Production"
          echo "Directory: dist"
          
          # デプロイ前の最終確認
          echo "=== Pre-deployment Verification ==="
          ls -la dist/
          
          # Cloudflare Pagesへのデプロイ
          echo "=== Starting Cloudflare Pages Deployment ==="
          
          # wrangler コマンドでデプロイ
          npx wrangler pages deploy dist \
            --project-name="raidhack-web" \
            --production \
            --compatibility-date="2024-01-15" \
            --verbose
          
          # デプロイ完了通知
          echo "=== Deployment Completed ==="
          PAGES_URL="https://raidhack-web.pages.dev"
          echo "Production URL: $PAGES_URL"
          echo "pages-url=$PAGES_URL" >> $GITHUB_OUTPUT
          
          # デプロイ後の確認
          echo "=== Post-deployment Verification ==="
          echo "Please verify the deployment at: $PAGES_URL"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}