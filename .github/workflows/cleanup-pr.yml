name: Cleanup RAIDHack – Pull Request

on:
  pull_request:
    branches: [ master ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to cleanup (required for manual run)'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup PR Environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          cd api
          npm ci

      - name: Delete Workers API
        run: |
          cd api
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi

          WORKER_NAME="raidhack-api-pr-$PR_NUMBER"
          echo "Attempting to delete Worker: $WORKER_NAME"

          if npx wrangler@latest whoami > /dev/null 2>&1; then
            echo "Wrangler authentication successful"
            echo "Deleting worker idempotently (will succeed even if absent)..."
            delete_output=$(npx wrangler@latest delete --name "$WORKER_NAME" --force 2>&1 || true)
            echo "$delete_output"
            if echo "$delete_output" | grep -qiE 'deleted|success'; then
              echo "Worker deletion confirmed"
            elif echo "$delete_output" | grep -qiE 'not found|could not find|404'; then
              echo "Worker already absent"
            else
              echo "Worker delete attempted; unable to confirm from output"
            fi
          else
            echo "Wrangler authentication failed"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Install web dependencies
        run: |
          cd web
          npm ci

      - name: Delete Cloudflare Pages deployments
        run: |
          cd web
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi
          
          echo "🗑️ Cleaning up Pages deployments for PR-${PR_NUMBER}"
          
          # Get Cloudflare identifiers
          ACCOUNT_ID=$(curl -s -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts" | jq -r '.result[0].id')
          
          PROJECT_ID=$(curl -s -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects" | \
            jq -r '.result[] | select(.name == "raidhack-web") | .id')
          
          # Get and delete PR deployments
          DEPLOYMENTS=$(curl -s -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_ID/deployments" | \
            jq -r --arg branch "pr-${PR_NUMBER}" \
            '.result[] | select(.deployment_trigger.metadata.branch == $branch) | .id')
          
          if [ -n "$DEPLOYMENTS" ]; then
            echo "Found deployments to delete:"
            DELETED_COUNT=0
            echo "$DEPLOYMENTS" | while read -r deployment_id; do
              if [ -n "$deployment_id" ]; then
                curl -s -X DELETE -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                  "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_ID/deployments/$deployment_id" \
                  > /dev/null
                echo "  ✓ $deployment_id"
                DELETED_COUNT=$((DELETED_COUNT + 1))
              fi
            done
            echo "Deleted $(echo "$DEPLOYMENTS" | wc -l) deployments"
          else
            echo "No deployments found for PR-${PR_NUMBER}"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Verify cleanup completion
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi
          
          echo "🔍 Verifying cleanup for PR-${PR_NUMBER}"
          
          # Check Worker
          WORKER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://raidhack-api-pr-${PR_NUMBER}.ukawamochi5.workers.dev" --max-time 5)
          
          # Check Pages
          PAGES_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://pr-${PR_NUMBER}.raidhack-web.pages.dev" --max-time 5)
          
          echo "Results:"
          echo "  Worker: $([ "$WORKER_STATUS" = "404" ] && echo "✓ Deleted" || echo "⚠ Active ($WORKER_STATUS)")"
          echo "  Pages:  $([ "$PAGES_STATUS" = "404" ] && echo "✓ Deleted" || echo "⚠ Active ($PAGES_STATUS)")"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Comment PR cleanup
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.number }};
            const comment = `## 🧹 PR環境削除完了\n\nPR #${prNumber} の環境を削除しました。\n\n- ✅ API Worker削除\n- ✅ Pages デプロイメント削除`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
