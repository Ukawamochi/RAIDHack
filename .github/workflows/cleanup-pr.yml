name: Cleanup RAIDHack – Pull Request

on:
  pull_request:
    branches: [ master ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to cleanup (required for manual run)'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup PR Environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          cd api
          npm ci

      - name: Delete Workers API
        run: |
          cd api
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi

          WORKER_NAME="raidhack-api-pr-$PR_NUMBER"
          echo "Attempting to delete Worker: $WORKER_NAME"

          if npx wrangler@latest whoami > /dev/null 2>&1; then
            echo "Wrangler authentication successful"
            echo "Deleting worker idempotently (will succeed even if absent)..."
            delete_output=$(npx wrangler@latest delete --name "$WORKER_NAME" --force 2>&1 || true)
            echo "$delete_output"
            if echo "$delete_output" | grep -qiE 'deleted|success'; then
              echo "Worker deletion confirmed"
            elif echo "$delete_output" | grep -qiE 'not found|could not find|404'; then
              echo "Worker already absent"
            else
              echo "Worker delete attempted; unable to confirm from output"
            fi
          else
            echo "Wrangler authentication failed"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Install web dependencies
        run: |
          cd web
          npm ci

      - name: Delete Cloudflare Pages deployments
        run: |
          cd web
          PROJECT_NAME="raidhack-web"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi
          BRANCH_NAME="pr-${PR_NUMBER}"
          echo "Attempting to cleanup Pages deployments for branch: $BRANCH_NAME"
          if npx wrangler@latest whoami > /dev/null 2>&1; then
            echo "Wrangler authentication successful for Pages"
            if npx wrangler@latest pages project list | grep -q "$PROJECT_NAME"; then
              echo "Pages project $PROJECT_NAME found"
              echo "Getting deployment IDs for branch: $BRANCH_NAME"
              JSON=$(npx wrangler@latest pages deployments list --project-name "$PROJECT_NAME" --format json 2>/dev/null || echo "[]")
              echo "$JSON" | head -c 5000 >/dev/null # avoid flooding logs
              DEPLOYMENT_IDS=$(echo "$JSON" | jq -r --arg branch "$BRANCH_NAME" '.[] | select((.deployment_trigger.metadata.branch // "") == $branch) | .id' 2>/dev/null || echo "")
              if [ -n "$DEPLOYMENT_IDS" ]; then
                echo "Found deployment IDs for branch $BRANCH_NAME:"
                echo "$DEPLOYMENT_IDS"
                echo "$DEPLOYMENT_IDS" | while read -r deployment_id; do
                  if [ -n "$deployment_id" ]; then
                    echo "Deleting deployment: $deployment_id"
                    npx wrangler@latest pages deployment delete "$deployment_id" --project-name "$PROJECT_NAME" --force || echo "Failed to delete deployment $deployment_id"
                  fi
                done
                echo "All deployments for branch $BRANCH_NAME processed"
              else
                echo "No deployments found for branch $BRANCH_NAME (already cleaned up or never existed)"
              fi
            else
              echo "Pages project $PROJECT_NAME not found"
            fi
          else
            echo "Wrangler authentication failed for Pages"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Verify cleanup completion
        run: |
          echo "=== Cleanup Verification ==="
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi
          echo "PR Number: $PR_NUMBER"
          echo "Expected Worker Name: raidhack-api-pr-$PR_NUMBER"
          echo "Expected Pages Branch: pr-$PR_NUMBER"
          echo "Checking Worker reachability..."
          URL="https://raidhack-api-pr-$PR_NUMBER.ukawamochi5.workers.dev"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
          echo "Worker HTTP status: $STATUS"
          if [ "$STATUS" = "404" ] || [ "$STATUS" = "000" ]; then
            echo "✅ Worker appears deleted or unreachable"
          else
            echo "⚠️ WARNING: Worker may still be reachable ($STATUS)"
          fi

          cd web
          echo "Checking Pages deployments..."
          REMAINING=$(npx wrangler@latest pages deployments list --project-name "raidhack-web" --format json 2>/dev/null | \
            jq -r --arg branch "pr-$PR_NUMBER" '.[] | select((.deployment_trigger.metadata.branch // "") == $branch) | .id' 2>/dev/null | wc -l || echo "0")

          if [ "$REMAINING" -gt 0 ]; then
            echo "⚠️ WARNING: $REMAINING Pages deployments still exist for this PR"
          else
            echo "✅ All Pages deployments successfully deleted"
          fi

          echo "Checking Pages preview URL reachability..."
          PREVIEW_URL="https://pr-$PR_NUMBER.raidhack-web.pages.dev"
          PSTATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL" || echo "000")
          echo "Pages preview HTTP status: $PSTATUS"
          if [ "$PSTATUS" = "404" ] || [ "$PSTATUS" = "530" ] || [ "$PSTATUS" = "000" ]; then
            echo "✅ Pages preview appears deleted or unreachable"
          else
            echo "⚠️ WARNING: Pages preview may still be reachable ($PSTATUS)"
          fi
          echo "=== Cleanup Verification Complete ==="
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Comment PR cleanup
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.number }};
            const comment = `## 🧹 PR環境クリーンアップ実行完了\n\nこのPR (#${prNumber}) の専用環境のクリーンアップが実行されました：\n\n- **Worker API**: \`raidhack-api-pr-${prNumber}\`\n- **Pages Branch**: \`pr-${prNumber}\`\n\nクリーンアップの詳細は[Actions実行ログ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})で確認できます。\n\n> **Note**: リソースの削除には数分かかる場合があります。完全に削除されない場合は手動での確認をお願いします。`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
