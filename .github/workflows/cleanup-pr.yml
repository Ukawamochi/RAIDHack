name: Cleanup RAIDHack – Pull Request

on:
  pull_request:
    branches: [ master ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to cleanup (required for manual run)'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup PR Environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          cd api
          npm ci

      - name: Delete Workers API
        run: |
          cd api
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi

          WORKER_NAME="raidhack-api-pr-$PR_NUMBER"
          echo "Attempting to delete Worker: $WORKER_NAME"

          if npx wrangler@latest whoami > /dev/null 2>&1; then
            echo "Wrangler authentication successful"
            echo "Deleting worker idempotently (will succeed even if absent)..."
            delete_output=$(npx wrangler@latest delete --name "$WORKER_NAME" --force 2>&1 || true)
            echo "$delete_output"
            if echo "$delete_output" | grep -qiE 'deleted|success'; then
              echo "Worker deletion confirmed"
            elif echo "$delete_output" | grep -qiE 'not found|could not find|404'; then
              echo "Worker already absent"
            else
              echo "Worker delete attempted; unable to confirm from output"
            fi
          else
            echo "Wrangler authentication failed"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Install web dependencies
        run: |
          cd web
          npm ci

      - name: Delete Cloudflare Pages deployments
        run: |
          cd web
          PROJECT_NAME="raidhack-web"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi
          BRANCH_NAME="pr-${PR_NUMBER}"
          echo "Attempting to cleanup Pages deployments for branch: $BRANCH_NAME"
          
          if npx wrangler@latest whoami > /dev/null 2>&1; then
            echo "Wrangler authentication successful for Pages"
            if npx wrangler@latest pages project list | grep -q "$PROJECT_NAME"; then
              echo "Pages project $PROJECT_NAME found"
              echo "Getting deployment information for branch: $BRANCH_NAME"
              
              # JSON構造を確認してデバッグ情報を出力
              JSON=$(npx wrangler@latest pages deployments list --project-name "$PROJECT_NAME" --format json 2>/dev/null || echo "[]")
              echo "Raw JSON response (first 1000 chars):"
              echo "$JSON" | head -c 1000
              echo ""
              
              # 複数の可能性のあるフィールド名で検索
              echo "Attempting multiple branch field patterns..."
              DEPLOYMENT_IDS=""
              
              # Pattern 1: .branch
              PATTERN1=$(echo "$JSON" | jq -r --arg branch "$BRANCH_NAME" '.[] | select(.branch == $branch) | .id' 2>/dev/null || echo "")
              if [ -n "$PATTERN1" ]; then
                echo "Found deployments using .branch pattern"
                DEPLOYMENT_IDS="$PATTERN1"
              fi
              
              # Pattern 2: .environment
              if [ -z "$DEPLOYMENT_IDS" ]; then
                PATTERN2=$(echo "$JSON" | jq -r --arg branch "$BRANCH_NAME" '.[] | select(.environment == $branch) | .id' 2>/dev/null || echo "")
                if [ -n "$PATTERN2" ]; then
                  echo "Found deployments using .environment pattern"
                  DEPLOYMENT_IDS="$PATTERN2"
                fi
              fi
              
              # Pattern 3: .deployment_trigger.metadata.branch
              if [ -z "$DEPLOYMENT_IDS" ]; then
                PATTERN3=$(echo "$JSON" | jq -r --arg branch "$BRANCH_NAME" '.[] | select((.deployment_trigger.metadata.branch // "") == $branch) | .id' 2>/dev/null || echo "")
                if [ -n "$PATTERN3" ]; then
                  echo "Found deployments using .deployment_trigger.metadata.branch pattern"
                  DEPLOYMENT_IDS="$PATTERN3"
                fi
              fi
              
              # Pattern 4: URL-based matching for preview deployments
              if [ -z "$DEPLOYMENT_IDS" ]; then
                PREVIEW_URL_PATTERN="$BRANCH_NAME.raidhack-web.pages.dev"
                PATTERN4=$(echo "$JSON" | jq -r --arg pattern "$PREVIEW_URL_PATTERN" '.[] | select(.url | contains($pattern)) | .id' 2>/dev/null || echo "")
                if [ -n "$PATTERN4" ]; then
                  echo "Found deployments using URL pattern matching"
                  DEPLOYMENT_IDS="$PATTERN4"
                fi
              fi
              
              if [ -n "$DEPLOYMENT_IDS" ]; then
                echo "Found deployment IDs for branch $BRANCH_NAME:"
                echo "$DEPLOYMENT_IDS"
                echo "$DEPLOYMENT_IDS" | while read -r deployment_id; do
                  if [ -n "$deployment_id" ]; then
                    echo "Deleting deployment: $deployment_id"
                    delete_result=$(npx wrangler@latest pages deployment delete "$deployment_id" --project-name "$PROJECT_NAME" --force 2>&1 || echo "FAILED")
                    echo "Delete result: $delete_result"
                    if echo "$delete_result" | grep -qiE 'success|deleted|removed'; then
                      echo "✅ Successfully deleted deployment $deployment_id"
                    else
                      echo "⚠️ Delete command executed but result unclear for $deployment_id"
                    fi
                  fi
                done
                echo "All deployments for branch $BRANCH_NAME processed"
                
                # 追加: ブランチプレビューの無効化試行
                echo "Attempting to disable branch preview for: $BRANCH_NAME"
                disable_result=$(npx wrangler@latest pages project edit "$PROJECT_NAME" --branch-preview-disabled="$BRANCH_NAME" 2>&1 || echo "Branch preview disable not supported")
                echo "Branch preview disable result: $disable_result"
                
              else
                echo "No deployments found for branch $BRANCH_NAME"
                echo "Checking if any deployments exist at all..."
                TOTAL_DEPLOYMENTS=$(echo "$JSON" | jq length 2>/dev/null || echo "0")
                echo "Total deployments in project: $TOTAL_DEPLOYMENTS"
                if [ "$TOTAL_DEPLOYMENTS" -gt 0 ]; then
                  echo "Sample deployment structure:"
                  echo "$JSON" | jq '.[0] | keys' 2>/dev/null || echo "Could not parse deployment structure"
                fi
              fi
            else
              echo "Pages project $PROJECT_NAME not found"
            fi
          else
            echo "Wrangler authentication failed for Pages"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Verify cleanup completion
        run: |
          echo "=== Enhanced Cleanup Verification ==="
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          fi
          echo "PR Number: $PR_NUMBER"
          echo "Expected Worker Name: raidhack-api-pr-$PR_NUMBER"
          echo "Expected Pages Branch: pr-$PR_NUMBER"
          
          # Worker verification
          echo "Checking Worker reachability..."
          WORKER_URL="https://raidhack-api-pr-$PR_NUMBER.ukawamochi5.workers.dev"
          WORKER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$WORKER_URL" --max-time 10 || echo "000")
          echo "Worker HTTP status: $WORKER_STATUS"
          if [ "$WORKER_STATUS" = "404" ] || [ "$WORKER_STATUS" = "000" ] || [ "$WORKER_STATUS" = "522" ]; then
            echo "✅ Worker appears deleted or unreachable"
          else
            echo "⚠️ WARNING: Worker may still be reachable ($WORKER_STATUS)"
          fi

          cd web
          echo "Checking Pages deployments after cleanup..."
          JSON=$(npx wrangler@latest pages deployments list --project-name "raidhack-web" --format json 2>/dev/null || echo "[]")
          
          # Check all possible patterns for remaining deployments
          REMAINING_PATTERN1=$(echo "$JSON" | jq -r --arg branch "pr-$PR_NUMBER" '.[] | select(.branch == $branch) | .id' 2>/dev/null | wc -l || echo "0")
          REMAINING_PATTERN2=$(echo "$JSON" | jq -r --arg branch "pr-$PR_NUMBER" '.[] | select(.environment == $branch) | .id' 2>/dev/null | wc -l || echo "0")
          REMAINING_PATTERN3=$(echo "$JSON" | jq -r --arg branch "pr-$PR_NUMBER" '.[] | select((.deployment_trigger.metadata.branch // "") == $branch) | .id' 2>/dev/null | wc -l || echo "0")
          REMAINING_URL=$(echo "$JSON" | jq -r --arg pattern "pr-$PR_NUMBER.raidhack-web.pages.dev" '.[] | select(.url | contains($pattern)) | .id' 2>/dev/null | wc -l || echo "0")

          TOTAL_REMAINING=$((REMAINING_PATTERN1 + REMAINING_PATTERN2 + REMAINING_PATTERN3 + REMAINING_URL))
          
          if [ "$TOTAL_REMAINING" -gt 0 ]; then
            echo "⚠️ WARNING: $TOTAL_REMAINING Pages deployments still exist for this PR"
            echo "Breakdown: Pattern1=$REMAINING_PATTERN1, Pattern2=$REMAINING_PATTERN2, Pattern3=$REMAINING_PATTERN3, URL=$REMAINING_URL"
          else
            echo "✅ All Pages deployments successfully deleted"
          fi

          # Enhanced Pages preview URL testing
          echo "Testing multiple preview URL patterns..."
          PREVIEW_URLS=(
            "https://pr-$PR_NUMBER.raidhack-web.pages.dev"
            "https://pr-$PR_NUMBER.raidhack-web.pages.dev/"
            "https://pr-$PR_NUMBER--raidhack-web.pages.dev"
          )
          
          ALL_DELETED=true
          for url in "${PREVIEW_URLS[@]}"; do
            echo "Testing: $url"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$url" --max-time 10 || echo "000")
            echo "Status: $STATUS"
            if [ "$STATUS" = "404" ] || [ "$STATUS" = "530" ] || [ "$STATUS" = "000" ] || [ "$STATUS" = "522" ]; then
              echo "✅ URL appears deleted or unreachable"
            else
              echo "⚠️ WARNING: URL may still be reachable ($STATUS)"
              ALL_DELETED=false
            fi
          done
          
          if [ "$ALL_DELETED" = true ]; then
            echo "✅ All preview URLs appear deleted"
          else
            echo "⚠️ Some preview URLs may still be accessible"
          fi
          
          # Final summary
          echo "=== Cleanup Summary ==="
          echo "Worker Status: $([ "$WORKER_STATUS" = "404" ] || [ "$WORKER_STATUS" = "000" ] || [ "$WORKER_STATUS" = "522" ] && echo "✅ Deleted" || echo "⚠️ May exist")"
          echo "Pages Deployments: $([ "$TOTAL_REMAINING" -eq 0 ] && echo "✅ All deleted" || echo "⚠️ $TOTAL_REMAINING remaining")"
          echo "Preview URLs: $([ "$ALL_DELETED" = true ] && echo "✅ All deleted" || echo "⚠️ Some accessible")"
          echo "=== Cleanup Verification Complete ==="
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Comment PR cleanup
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.number }};
            const comment = `## 🧹 PR環境クリーンアップ実行完了\n\nこのPR (#${prNumber}) の専用環境のクリーンアップが実行されました;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
