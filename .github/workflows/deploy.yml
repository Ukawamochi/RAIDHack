name: Deploy RAIDHack

on:
    push:
        branches: [ master ]  # mainからmasterに変更
    pull_request:
        branches: [ master ]  # mainからmasterに変更
        types: [ opened, synchronize, reopened, closed ]
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write
    issues: write

jobs:
    deploy-api:
        if: github.event.action != 'closed'
        runs-on: ubuntu-latest
        name: Deploy Workers API
        outputs:
            api-url: ${{ steps.deploy-api.outputs.api-url }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: api/package-lock.json

            - name: Install API dependencies
              run: |
                  cd api
                  npm ci

            - name: Deploy Workers API
              id: deploy-api
              run: |
                  cd api
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                      # PR用の環境: raidhack-api-pr-{PR番号}
                      WORKER_NAME="raidhack-api-pr-${{ github.event.number }}"
                      API_URL="https://${WORKER_NAME}.ukawamochi5.workers.dev"
                  else
                      # 本番環境
                      WORKER_NAME="raidhack-api"
                      API_URL="https://raidhack-api.ukawamochi5.workers.dev"
                  fi
                  
                  echo "Deploying to: $API_URL"
                  npx wrangler deploy --minify --name "$WORKER_NAME"
                  echo "api-url=$API_URL" >> $GITHUB_OUTPUT
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        env:
            CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    deploy-web:
        if: github.event.action != 'closed'
        runs-on: ubuntu-latest
        name: Deploy Pages
        needs: deploy-api
        outputs:
            pages-url: ${{ steps.deploy-pages.outputs.pages-url }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: web/package-lock.json

            - name: Install Web dependencies
              run: |
                  cd web
                  npm ci

            - name: Build React app
              run: |
                  cd web
                  npm run build
              env:
                  REACT_APP_API_BASE: ${{ needs.deploy-api.outputs.api-url }}

            - name: Deploy to Cloudflare Pages
              id: deploy-pages
              run: |
                  cd web
                  # 単一プロジェクトでブランチベースのデプロイ
                  PROJECT_NAME="raidhack-web"
                  
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                      # PR用: ブランチ名としてPR番号を使用
                      BRANCH_NAME="pr-${{ github.event.number }}"
                      echo "Deploying PR to branch: $BRANCH_NAME"
                      output=$(npx wrangler@latest pages deploy dist --project-name "$PROJECT_NAME" --branch "$BRANCH_NAME" 2>&1)
                      # PR用のプレビューURLを生成
                      PAGES_URL="https://${BRANCH_NAME}.raidhack-web.pages.dev"
                  else
                      # 本番用: productionブランチ
                      echo "Deploying to production"
                      output=$(npx wrangler@latest pages deploy dist --project-name "$PROJECT_NAME" --branch "production" 2>&1)
                      PAGES_URL="https://raidhack-web.pages.dev"
                  fi
                  
                  echo "$output"
                  
                  # 出力から実際のURLを取得を試行
                  actual_url=$(echo "$output" | grep -oE 'https://[a-zA-Z0-9\-\.]+\.pages\.dev' | head -1)
                  if [ -n "$actual_url" ]; then
                      PAGES_URL="$actual_url"
                  fi
                  
                  echo "pages-url=$PAGES_URL" >> $GITHUB_OUTPUT
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

            - name: Comment PR with deployment info
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const pagesUrl = '${{ steps.deploy-pages.outputs.pages-url }}';
                      const apiUrl = '${{ needs.deploy-api.outputs.api-url }}';
                      
                      const comment = `## 🚀 PR環境デプロイ完了
                      
                      このPR (#${{ github.event.number }}) の変更が専用環境にデプロイされました：
                      
                      - **Webアプリ**: ${pagesUrl}
                      - **API**: ${apiUrl}
                      
                      各PRごとに独立した環境で動作します。デプロイメントを確認してください。
                      
                      > **Note**: この環境はPRがクローズされると自動的に削除されます。`;
                      
                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: comment
                      });

    cleanup:
        if: github.event.action == 'closed'
        runs-on: ubuntu-latest
        name: Cleanup PR Environment
        steps:
            - name: Delete Workers API
              run: |
                  WORKER_NAME="raidhack-api-pr-${{ github.event.number }}"
                  echo "Deleting Worker: $WORKER_NAME"
                  npx wrangler delete "$WORKER_NAME" --force || echo "Worker $WORKER_NAME not found or already deleted"
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

            - name: Comment PR cleanup
              uses: actions/github-script@v7
              with:
                  script: |
                      const comment = `## 🧹 PR環境クリーンアップ完了
                      
                      このPRの専用環境が削除されました：
                      
                      - ~~API: raidhack-api-pr-${{ github.event.number }}.ukawamochi5.workers.dev~~
                      - ~~Web: pr-${{ github.event.number }}.raidhack-web.pages.dev~~
                      
                      リソースがクリーンアップされました。`;
                      
                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: comment
                      });