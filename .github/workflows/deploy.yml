name: Deploy RAIDHack

on:
    push:
        branches: [ master ]  # main„Åã„Çâmaster„Å´Â§âÊõ¥
    pull_request:
        branches: [ master ]  # main„Åã„Çâmaster„Å´Â§âÊõ¥
        types: [ opened, synchronize, reopened, closed ]
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write
    issues: write

jobs:
    deploy-api:
        if: github.event.action != 'closed'
        runs-on: ubuntu-latest
        name: Deploy Workers API
        outputs:
            api-url: ${{ steps.deploy-api.outputs.api-url }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: api/package-lock.json

            - name: Install API dependencies
              run: |
                  cd api
                  npm ci

            - name: Deploy Workers API
              id: deploy-api
              run: |
                  cd api
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                      # PRÁî®„ÅÆÁí∞Â¢É: raidhack-api-pr-{PRÁï™Âè∑}
                      WORKER_NAME="raidhack-api-pr-${{ github.event.number }}"
                      API_URL="https://${WORKER_NAME}.ukawamochi5.workers.dev"
                  else
                      # Êú¨Áï™Áí∞Â¢É
                      WORKER_NAME="raidhack-api"
                      API_URL="https://raidhack-api.ukawamochi5.workers.dev"
                  fi
                  
                  echo "Deploying to: $API_URL"
                  npx wrangler deploy --minify --name "$WORKER_NAME"
                  echo "api-url=$API_URL" >> $GITHUB_OUTPUT
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        env:
            CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    deploy-web:
        if: github.event.action != 'closed'
        runs-on: ubuntu-latest
        name: Deploy Pages
        needs: deploy-api
        outputs:
            pages-url: ${{ steps.deploy-pages.outputs.pages-url }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: web/package-lock.json

            - name: Install Web dependencies
              run: |
                  cd web
                  npm ci

            - name: Build React app
              run: |
                  cd web
                  npm run build
              env:
                  VITE_API_BASE: ${{ needs.deploy-api.outputs.api-url }}

            - name: Deploy to Cloudflare Pages
              id: deploy-pages
              run: |
                  cd web
                  # Âçò‰∏Ä„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„Éñ„É©„É≥„ÉÅ„Éô„Éº„Çπ„ÅÆ„Éá„Éó„É≠„Ç§
                  PROJECT_NAME="raidhack-web"
                  
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                      # PRÁî®: „Éñ„É©„É≥„ÉÅÂêç„Å®„Åó„Å¶PRÁï™Âè∑„Çí‰ΩøÁî®
                      BRANCH_NAME="pr-${{ github.event.number }}"
                      echo "Deploying PR to branch: $BRANCH_NAME"
                      output=$(npx wrangler@latest pages deploy dist --project-name "$PROJECT_NAME" --branch "$BRANCH_NAME" 2>&1)
                      # PRÁî®„ÅÆ„Éó„É¨„Éì„É•„ÉºURL„ÇíÁîüÊàê
                      PAGES_URL="https://${BRANCH_NAME}.raidhack-web.pages.dev"
                  else
                      # Êú¨Áï™Áî®: production„Éñ„É©„É≥„ÉÅ
                      echo "Deploying to production"
                      output=$(npx wrangler@latest pages deploy dist --project-name "$PROJECT_NAME" --branch "production" 2>&1)
                      PAGES_URL="https://raidhack-web.pages.dev"
                  fi
                  
                  echo "$output"
                  
                  # Âá∫Âäõ„Åã„ÇâÂÆüÈöõ„ÅÆURL„ÇíÂèñÂæó„ÇíË©¶Ë°å
                  actual_url=$(echo "$output" | grep -oE 'https://[a-zA-Z0-9\-\.]+\.pages\.dev' | head -1)
                  if [ -n "$actual_url" ]; then
                      PAGES_URL="$actual_url"
                  fi
                  
                  echo "pages-url=$PAGES_URL" >> $GITHUB_OUTPUT
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

            - name: Comment PR with deployment info
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const pagesUrl = '${{ steps.deploy-pages.outputs.pages-url }}';
                      const apiUrl = '${{ needs.deploy-api.outputs.api-url }}';
                      
                      const comment = `## üöÄ PRÁí∞Â¢É„Éá„Éó„É≠„Ç§ÂÆå‰∫Ü
                      
                      „Åì„ÅÆPR (#${{ github.event.number }}) „ÅÆÂ§âÊõ¥„ÅåÂ∞ÇÁî®Áí∞Â¢É„Å´„Éá„Éó„É≠„Ç§„Åï„Çå„Åæ„Åó„ÅüÔºö
                      
                      - **Web„Ç¢„Éó„É™**: ${pagesUrl}
                      - **API**: ${apiUrl}
                      
                      ÂêÑPR„Åî„Å®„Å´Áã¨Á´ã„Åó„ÅüÁí∞Â¢É„ÅßÂãï‰Ωú„Åó„Åæ„Åô„ÄÇ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                      
                      > **Note**: „Åì„ÅÆÁí∞Â¢É„ÅØPR„Åå„ÇØ„É≠„Éº„Ç∫„Åï„Çå„Çã„Å®Ëá™ÂãïÁöÑ„Å´ÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇ`;
                      
                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: comment
                      });

    cleanup:
        if: github.event.action == 'closed'
        runs-on: ubuntu-latest
        name: Cleanup PR Environment
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  
            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Install dependencies
              run: |
                  cd api
                  npm ci

            - name: Delete Workers API
              run: |
                  cd api
                  WORKER_NAME="raidhack-api-pr-${{ github.event.number }}"
                  echo "Attempting to delete Worker: $WORKER_NAME"
                  
                  # „Åæ„ÅöÂ≠òÂú®Á¢∫Ë™ç
                  if npx wrangler whoami > /dev/null 2>&1; then
                      echo "Wrangler authentication successful"
                      
                      # Worker„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Å¶Â≠òÂú®Á¢∫Ë™ç
                      if npx wrangler list | grep -q "$WORKER_NAME"; then
                          echo "Worker $WORKER_NAME found, deleting..."
                          npx wrangler delete "$WORKER_NAME" --force
                          echo "Worker $WORKER_NAME deleted successfully"
                      else
                          echo "Worker $WORKER_NAME not found, already deleted or never existed"
                      fi
                  else
                      echo "Wrangler authentication failed"
                      exit 1
                  fi
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

            - name: Install web dependencies
              run: |
                  cd web
                  npm ci

            - name: Delete Cloudflare Pages deployments
              run: |
                  cd web
                  PROJECT_NAME="raidhack-web"
                  BRANCH_NAME="pr-${{ github.event.number }}"
                  
                  echo "Attempting to cleanup Pages deployments for branch: $BRANCH_NAME"
                  
                  # WranglerË™çË®ºÁ¢∫Ë™ç
                  if npx wrangler@latest whoami > /dev/null 2>&1; then
                      echo "Wrangler authentication successful for Pages"
                      
                      # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂ≠òÂú®Á¢∫Ë™ç„Å®„Éá„Éó„É≠„Ç§„É°„É≥„Éà‰∏ÄË¶ßÂèñÂæó
                      if npx wrangler@latest pages project list | grep -q "$PROJECT_NAME"; then
                          echo "Pages project $PROJECT_NAME found"
                          
                          # Ë©≤ÂΩì„Éñ„É©„É≥„ÉÅ„ÅÆ„Éá„Éó„É≠„Ç§„É°„É≥„ÉàID„ÇíÂèñÂæó„Åó„Å¶ÂâäÈô§
                          echo "Getting deployment IDs for branch: $BRANCH_NAME"
                          
                          # JSONÂΩ¢Âºè„Åß„Éá„Éó„É≠„Ç§„É°„É≥„Éà‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„ÄÅË©≤ÂΩì„Éñ„É©„É≥„ÉÅ„ÅÆ„ÇÇ„ÅÆ„ÇíÊäΩÂá∫
                          DEPLOYMENT_IDS=$(npx wrangler@latest pages deployment list --project-name "$PROJECT_NAME" --format json 2>/dev/null | \
                            jq -r --arg branch "$BRANCH_NAME" '.[] | select(.deployment_trigger.metadata.branch == $branch) | .id' 2>/dev/null || echo "")
                          
                          if [ -n "$DEPLOYMENT_IDS" ]; then
                              echo "Found deployment IDs for branch $BRANCH_NAME:"
                              echo "$DEPLOYMENT_IDS"
                              
                              # ÂêÑ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÇíÂâäÈô§
                              echo "$DEPLOYMENT_IDS" | while read -r deployment_id; do
                                  if [ -n "$deployment_id" ]; then
                                      echo "Deleting deployment: $deployment_id"
                                      npx wrangler@latest pages deployment delete "$deployment_id" --project-name "$PROJECT_NAME" --force || echo "Failed to delete deployment $deployment_id"
                                  fi
                              done
                              echo "All deployments for branch $BRANCH_NAME processed"
                          else
                              echo "No deployments found for branch $BRANCH_NAME (already cleaned up or never existed)"
                          fi
                      else
                          echo "Pages project $PROJECT_NAME not found"
                      fi
                  else
                      echo "Wrangler authentication failed for Pages"
                      exit 1
                  fi
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

            - name: Verify cleanup completion
              run: |
                  echo "=== Cleanup Verification ==="
                  echo "PR Number: ${{ github.event.number }}"
                  echo "Expected Worker Name: raidhack-api-pr-${{ github.event.number }}"
                  echo "Expected Pages Branch: pr-${{ github.event.number }}"
                  
                  # WorkersÁ¢∫Ë™ç
                  cd api
                  echo "Checking if Worker still exists..."
                  if npx wrangler list | grep -q "raidhack-api-pr-${{ github.event.number }}"; then
                      echo "‚ö†Ô∏è WARNING: Worker still exists"
                  else
                      echo "‚úÖ Worker successfully deleted"
                  fi
                  
                  # PagesÁ¢∫Ë™ç
                  cd ../web
                  echo "Checking Pages deployments..."
                  REMAINING=$(npx wrangler@latest pages deployment list --project-name "raidhack-web" --format json 2>/dev/null | \
                    jq -r --arg branch "pr-${{ github.event.number }}" '.[] | select(.deployment_trigger.metadata.branch == $branch) | .id' 2>/dev/null | wc -l || echo "0")
                  
                  if [ "$REMAINING" -gt 0 ]; then
                      echo "‚ö†Ô∏è WARNING: $REMAINING Pages deployments still exist for this PR"
                  else
                      echo "‚úÖ All Pages deployments successfully deleted"
                  fi
                  
                  echo "=== Cleanup Verification Complete ==="
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

            - name: Comment PR cleanup
              uses: actions/github-script@v7
              with:
                  script: |
                      const comment = `## üßπ PRÁí∞Â¢É„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆüË°åÂÆå‰∫Ü
                      
                      „Åì„ÅÆPR (#${{ github.event.number }}) „ÅÆÂ∞ÇÁî®Áí∞Â¢É„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÅåÂÆüË°å„Åï„Çå„Åæ„Åó„ÅüÔºö
                      
                      - **Worker API**: \`raidhack-api-pr-${{ github.event.number }}\`
                      - **Pages Branch**: \`pr-${{ github.event.number }}\`
                      
                      „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÅÆË©≥Á¥∞„ÅØ[ActionsÂÆüË°å„É≠„Ç∞](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})„ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ
                      
                      > **Note**: „É™„ÇΩ„Éº„Çπ„ÅÆÂâäÈô§„Å´„ÅØÊï∞ÂàÜ„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÂÆåÂÖ®„Å´ÂâäÈô§„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅØÊâãÂãï„Åß„ÅÆÁ¢∫Ë™ç„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ`;
                      
                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: comment
                      });